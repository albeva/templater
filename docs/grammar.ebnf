(* grammar for template table files *)
Content         = [ StatementList ];
StatementList   = Statement { "\n" Statement };
Statement       = Import | Table;
Import          = "import" STRING "as" IDENTIFIER;

(* table *)
Table            = "table" IDENTIFIER [ "(" TableColumnList ")" ] "=" TableContentList;
TableColumnList  = TableColumn { TableColumn };
TableColumn      = IDENTIFIER [ "=" Value ];
TableContentList = TableContent { "+" TableContent };
TableContent     = TableInherit | TableBody;
TableInherit     = Member [ "(" Expression ")" ];
TableBody        = "[" [ TableRowList ] "]";
TableRowList     = TableRow { "\n" TableRow };
TableRow         = Value { Value };

(* expressions. Incomplete; lacks precedence information *)
Expression       = Primary { BinaryOperator Primary };
Primary          = ( UnaryOperator Primary )
                 | ( "(" Expression ")" )
                 | LITERAL
                 ;
BinaryOperator   = "<" | "<=" | ">" | ">=" | "==" | "!=" | "&&" | "||";
UnaryOperator    = "!";

(* Misc *)
Member          = IDENTIFIER { "." IDENTIFIER };
Value           = IDENTIFIER | NUMBER | STRING;

(* Lex tokens *)
IDENTIFIER      = ( "_" IDENTBODY { IDENTBODY } )
                | ( LETTER { IDENTBODY } )
                ;
IDENTBODY       = DIGIT | LETTER | "_";
NUMBER          = DIGIT { DIGIT };
STRING          = '"' .*? '"';
LETTER          = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z";
DIGIT           = "0" | "1" | ... | "9";
